# {{ ansible_managed }}
# FILTERS
filter {
  if [type] == "syslog" {
    dns {
      reverse => [ "host" ]
      action => "replace"
    }
  }
  if [type] == "VMware" {
     mutate {
       add_tag => "VMware"
     }
  }
  if [type] == "vCenter" {
    mutate {
      add_tag => "vCenter"
    }
  }
  if [type] == "Fortigate" {
    mutate {
      add_tag => "Fortigate"
    }
  }
  if [type] == "eventlog" {
    mutate {
      add_tag => [ "WindowsEventLog" ]
    }
  }
  if [type] == "apache" {
    mutate {
      add_tag => [ "apache" ]
    }
  }
  if [type] =~ "nginx" {
    mutate {
      add_tag => [ "nginx" ]
    }
  }
  if [type] == "iis" {
    mutate {
      add_tag => [ "IIS" ]
    }
  }
}
# .::
filter {
  if [type] == "syslog" {
    mutate {
      remove_tag => "Ready"
    }
  }
}
# .::
filter {
   if "syslog" in [tags] {
     grok {
       match => { "message" => "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{ DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
       add_field => [ "received_at", "%{@timestamp}" ]
       add_field => [ "received_from", "%{host}" ]
     }
     syslog_pri { }
     date {
       match => [ "syslog_timestamp", "MMM d HH:mm:ss", "MMM dd HH:mm:ss" ]
     }
     if !("_grokparsefailure" in [tags]) {
        mutate {
          replace => [ "host", "%{syslog_hostname}" ]
          replace => [ "@source_host", "%{syslog_hostname}" ]
          replace => [ "@message", "%{syslog_message}" ]
        }
     }
     if [syslog_hostname] =~ /.*?(netscaler).*?(seguroslagunaro.com)?/ {
       mutate {
         add_tag => [ "Netscaler" ]
       }
     }
   }
}
# ..:: (IPTables)
filter {
  if "syslog" in [tags] {
    if "IPTables" in [message] {
      grok {
        match => { "message" => "%{IPTABLES}" }
        patterns_dir => [ "/opt/logstash/patterns" ]
      }
      mutate {
        add_tag => [ "IPTABLES" ]
      }
      geoip {
        source => "src_ip"
        target => "geoip"
        add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
        add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
      }
      mutate {
        convert => [ "[geoip][coordinates]", "float" ]
      }
    }
  }
}
# .:: (IPTables actions)
filter {
  if "IPTABLES" in [tags] {
    grok {
      match => [
        "message", "IPTables-%{WORD:iptables_action}"
      ]
    }
    grok {
      match => [
        "message", "PROTO=%{WORD:iptables_proto}"
      ]
    }
    mutate {
      remove_field => [ "proto" ]
    }
    mutate {
      rename => [ "iptables_proto", "proto" ]
    }
  }
}
# .:: (HAProxy)
filter {
  if "syslog" in [tags] {
    if [syslog_program] == "haproxy" {
      grok {
        break_on_match => false
        match => [
          "message", "%{HAPROXYHTTP}",
          "message", "%{HAPROXYTCP}"
        ]
        add_tag => [ "HAProxy" ]
      }
      geoip {
        source => "client_ip"
        target => "geoip"
        add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
        add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
      }
      mutate {
        convert => [ "[geoip][coordinates]", "float" ]
        replace => [ "host", "%{@source_host}" ]
        rename => [ "http_status_code", "response" ]
        rename => [ "http_request", "request" ]
        rename => [ "client_ip", "src_ip" ]
      }
    }
  }
}
# .:: (KeepAliveD)
filter {
  if "syslog" in [tags] {
    if [syslog_program] =~ /Keepalived/ {
      mutate {
        add_tag => [ "KeepAliveD" ]
      }
    }
  }
}
# .:: (SSH)
filter {
  if "syslog" in [tags] {
    if [syslog_program] == "sshd" {
      if "Failed password" in [message] {
        grok {
          break_on_match => false
          match => [
            "message", "invalid user %{DATA:UserName} from %{IP:src_ip}",
            "message", "for %{DATA:UserName} from %{IP:src_ip}"
          ]
        }
        mutate {
          add_tag => [ "SSH_Failed_Login" ]
        }
      }
      if "Accepted password" in [message] {
        grok {
          match => [
            "message", "for %{DATA:UserName} from %{IP:src_ip}"
          ]
        }
        mutate {
          add_tag => [ "SSH_Successful_Login" ]
        }
      }
      geoip {
        source => "src_ip"
        target => "geoip"
        add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
        add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
      }
      mutate {
        convert => [ "[geoip][coordinates]", "float" ]
      }
    }
  }
}
# .:: (VMware ESX(i))
filter {
  if "VMware" in [tags] {
    multiline {
      pattern => "-->"
      what => "previous"
    }
    grok {
      break_on_match => true
      match => [
        "message", "<%{POSINT:syslog_pri}>%{TIMESTAMP_ISO8601:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{  SYSLOGPROG:syslog_program}: (?<message-body>(?<message_system_info>(?:\[%{DATA:message_thread_id} %{  DATA:syslog_level} \'%{DATA:message_service}\'\ ?%{DATA:message_opID}])) \[%{DATA:message_service_info}]\ (?< syslog_message>(%{GREEDYDATA})))",
        "message", "<%{POSINT:syslog_pri}>%{TIMESTAMP_ISO8601:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{  SYSLOGPROG:syslog_program}: (?<message-body>(?<message_system_info>(?:\[%{DATA:message_thread_id} %{  DATA:syslog_level} \'%{DATA:message_service}\'\ ?%{DATA:message_opID}])) (?<syslog_message>(%{GREEDYDATA})))",
        "message", "<%{POSINT:syslog_pri}>%{TIMESTAMP_ISO8601:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{  SYSLOGPROG:syslog_program}: %{GREEDYDATA:syslog_message}"
      ]
    }
    syslog_pri { }
    date {
      match => [ "syslog_timestamp", "YYYY-MM-ddHH:mm:ss,SSS" ]
      timezone => "UTC"
    }
    mutate {
      replace => [ "@source_host", "%{syslog_hostname}" ]
    }
    mutate {
      replace => [ "@message", "%{syslog_message}" ]
    }
    if "Device naa" in [message] {
      grok {
        break_on_match => false
        match => [
          "message", "Device naa.%{WORD:device_naa} performance has %{WORD:device_status}%{GREEDYDATA} of %{  INT:datastore_latency_from}%{GREEDYDATA} to %{INT:datastore_latency_to}",
          "message", "Device naa.%{WORD:device_naa} performance has %{WORD:device_status}%{GREEDYDATA} from %{  INT:datastore_latency_from}%{GREEDYDATA} to %{INT:datastore_latency_to}"
        ]
      }
    }
    if "connectivity issues" in [message] {
      grok {
        match => [
          "message", "Hostd: %{GREEDYDATA} : %{DATA:device_access} to volume %{DATA:device_id} %{DATA:datastore } (following|due to)"
        ]
      }
    }
    if "WARNING" in [message] {
      grok {
        match => [
          "message", "WARNING: %{GREEDYDATA:vmware_warning_msg}"
        ]
      }
    }
  }
}
# Setting up VMware vCenter parsing
filter {
  if "vCenter" in [tags] {
    grok {
      break_on_match => true
      match => [
        "message", "<%{INT:syslog_pri}>%{SYSLOGTIMESTAMP} %{IPORHOST:syslog_hostname}   %{TIMESTAMP_ISO8601:syslog_timestamp} (?<message-body>(?<message_system_info>(?:\[%{DATA:message_thread_id} %{  DATA:syslog_level} \'%{DATA:message_service}\'\ ?%{DATA:message_opID}])) \[%{DATA:message_service_info}]\ (?< syslog_message>(%{GREEDYDATA})))",
        "message", "<%{INT:syslog_pri}>%{SYSLOGTIMESTAMP} %{IPORHOST:syslog_hostname}   %{TIMESTAMP_ISO8601:syslog_timestamp} (?<message-body>(?<message_system_info>(?:\[%{DATA:message_thread_id} %{  DATA:syslog_level} \'%{DATA:message_service}\'\ ?%{DATA:message_opID}])) (?<syslog_message>(%{GREEDYDATA})))",
        "message", "<%{INT:syslog_pri}>%{SYSLOGTIMESTAMP} %{IPORHOST:syslog_hostname}   %{TIMESTAMP_ISO8601:syslog_timestamp} %{GREEDYDATA:syslog_message}"
      ]
    }
    syslog_pri { }
    date {
      match => [ "syslog_timestamp", "YYYY-MM-ddHH:mm:ss,SSS" ]
      timezone => "UTC"
    }
    mutate {
      replace => [ "@source_host", "%{syslog_hostname}" ]
      replace => [ "@message", "%{syslog_message}" ]
    }
  }
}
# .:: (Fortigate)
filter {
  if "Fortigate" in [tags] {
    kv {
      trimkey=>[ "<[0-9][0-9][0-9]>" ]
      source => "message"
      add_field => ["sourcetime", "%{date}:%{time}"]
    }
    date { 
      match => ["sourcetime","yyyy-MM-dd:HH:mm:ss"]
    }
    mutate {
      replace => [ "host", "fortigate" ]
    }
  }
}
# .:: (Citrix Netscaler)
filter {
  if "Netscaler" in [tags] {
    grok {
      break_on_match => true
      match => [
        "message", "<%{POSINT:syslog_pri}> %{DATE_US}:%{TIME} GMT %{SYSLOGHOST:syslog_hostname} %{  GREEDYDATA:netscaler_message} : %{DATA} %{INT:netscaler_spcbid} - %{DATA} %{IP:clientip} - %{DATA} %{ INT:netscaler_client_port} - %{DATA} %{IP:netscaler_vserver_ip} - %{DATA} %{INT:netscaler_vserver_port} %{  GREEDYDATA:netscaler_message} - %{DATA} %{WORD:netscaler_session_type}",
        "message", "<%{POSINT:syslog_pri}> %{DATE_US}:%{TIME} GMT %{SYSLOGHOST:syslog_hostname} %{  GREEDYDATA:netscaler_message}"
      ]
    }
    syslog_pri { }
    geoip {
      source => "clientip"
      target => "geoip"
      add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
      add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
    }
    mutate {
      add_field => [ "src_ip", "%{clientip}" ]
      convert => [ "[geoip][coordinates]", "float" ]
      replace => [ "@source_host", "%{host}" ]
      replace => [ "@message", "%{netscaler_message}" ]
    }
  }
}
# .:: (Apache)
filter {
  if [type] == "apache" {
    grok {
      pattern => "%{COMBINEDAPACHELOG}"
    }
    geoip {
      source => "clientip"
      target => "geoip"
      add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
      add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
    }
    mutate {
      add_field => [ "src_ip", "%{clientip}" ]
      convert => [ "[geoip][coordinates]", "float" ]
      replace => [ "@source_host", "%{host}" ]
      replace => [ "@message", "%{message}" ]
      rename => [ "verb" , "method" ]
    }
    grok {
      match => [
        "message", "%{DATA:apache_vhost} "
      ]
    }
  }
}
# .:: (Nginx)
filter {
  if [type] =~ "nginx" {
    grok {
      pattern => "%{COMBINEDAPACHELOG}"
    }
    geoip {
      source => "clientip"
      target => "geoip"
      add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
      add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
    }
    mutate {
      add_field => [ "src_ip", "%{clientip}" ]
      convert => [ "[geoip][coordinates]", "float" ]
      replace => [ "@source_host", "%{host}" ]
      replace => [ "@message", "%{message}" ]
      rename => [ "verb" , "method" ]
    }
    grok {
      match => [
        "message", "%{DATA:apache_vhost} "
      ]
    }
  }
}
# .:: (Nginx errors)
filter {
  if [type] == "nginx-error" {
    grok {
      match => [
        "message", "(?<timestamp>%{YEAR}[./-]%{MONTHNUM}[./-]%{MONTHDAY}[- ]%{TIME}) \[%{LOGLEVEL:severity}\] %{  POSINT:pid}#%{NUMBER}: %{GREEDYDATA:errormessage}(?:, client: (?<clientip>%{IP}|%{HOSTNAME}))(?:, server: %{  IPORHOST:server})(?:, request: %{QS:request}) ??(?:, host: %{QS:host})",
        "message", "(?<timestamp>%{YEAR}[./-]%{MONTHNUM}[./-]%{MONTHDAY}[- ]%{TIME}) \[%{LOGLEVEL:severity}\] %{  POSINT:pid}#%{NUMBER}: %{GREEDYDATA:errormessage}(?:, client: (?<clientip>%{IP}|%{HOSTNAME}))(?:, server: %{  IPORHOST:server})(?:, request: %{QS:request})(?:, upstream: %{QS:upstream})(?:;, host: %{QS:host})(?:,  referrer: \"%{URI:referrer})"
      ]
    }
  }
}
# .:: (Windows Eventlogs)
filter {
  if [type] == "eventlog" {
    grok {
      match => { "EventReceivedTime"  => "\d+"}
    }
    mutate {
      lowercase => [ "EventType", "FileName", "Hostname", "Severity" ]
    }
    mutate {
      rename => [ "Hostname", "host" ]
    }
    date {
      match => [ "EventReceivedTime", "UNIX" ]
    }
    mutate {
      rename => [ "Message", "message" ]
    }
  }
}
# .:: (Microsoft IIS)
filter {
  if [type] == "iis" {
    if [message] =~ "^#" {
      drop {}
    }
    grok {
      match => [
        "message", "%{TIMESTAMP_ISO8601:logtime} %{IPORHOST:hostname} %{URIPROTO:cs_method} %{URIPATH:cs_stem} (?:%{  NOTSPACE:cs_query}|-) %{NUMBER:src_port} %{NOTSPACE:cs_username} %{IP:clientip} %{NOTSPACE:cs_useragent} %{ NUMBER:sc_status} %{NUMBER:sc_subresponse} %{NUMBER:sc_win32_status} %{NUMBER:timetaken}"
      ]
    }
    date {
      match => [ "logtime", "YYYY-MM-dd HH:mm:ss" ]
      timezone => "UTC"
    }
    geoip {
      source => "clientip"
      target => "geoip"
      add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
      add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
    }
    dns {
      reverse => [ "hostname" ]
      action => "replace"
    }
    mutate {
      add_field => [ "src_ip", "%{clientip}" ]
      convert => [ "[geoip][coordinates]", "float" ]
      replace => [ "@source_host", "%{hostname}" ]
      replace => [ "@message", "%{message}" ]
      rename => [ "cs_method", "method" ]
      rename => [ "cs_stem", "request" ]
      rename => [ "cs_useragent", "agent" ]
      rename => [ "cs_username", "username" ]
      rename => [ "sc_status", "response" ]
      rename => [ "timetaken", "time_request" ]
    }
  }
}
# .:: (MySQL)
filter {
  if [type] == "mysql-slowquery" {
    multiline {
      what => previous
      pattern => "^\s"
    }
    grok { 
      pattern => "^%{NUMBER:date} *%{NOTSPACE:time}" 
    }
    mutate {
      replace => [ "time", "%{date} %{time}" ] 
    }
    date {
      match => [ "YYMMdd H:mm:ss", "YYMMdd HH:mm:ss" ]
    }
    mutate { 
      remove => [ "time", "date" ] 
    }
    split { }
  }
}
# .:: Create @source_host_ip field for all devices for IP Tracking used along with src_ip and dst_ip fields
filter {
  if ![source_host_ip] {
    mutate {
      add_field => [ "source_host_ip", "%{@source_host}" ]
    }
    dns {
      resolve => [ "source_host_ip" ]
      action => "replace"
    }
    mutate {
      rename => [ "source_host_ip", "@source_host_ip" ]
    }
  }
}
# .:: (Remove unnecessary fields)
filter {
  if [type] == "apache" {
    mutate {
      remove_field => [ "clientip", "host", "timestamp" ]
    }
  }
  if [type] == "eventlog" {
    mutate {
      remove => [ "SourceModuleType", "EventTimeWritten", "EventTime", "EventReceivedTime", "EventType" ]
    }
  }
  if "HAProxy" in [tags] {
    mutate {
      remove_field => [ "accept_date", "haproxy_hour", "haproxy_milliseconds", "haproxy_minute", "haproxy_month",   "haproxy_monthday", "haproxy_second", "haproxy_time", "haproxy_year", "pid", "program", "syslog_server" ]
    }
  }
  if [type] == "iis" {
    mutate {
      remove_field => [ "clientip", "host", "hostname", "logtime" ]
    }
  }
  if [type] =~ "nginx" {
    mutate {
      remove_field => [ "clientip", "host", "timestamp" ]
    }
  }
  if "Fortigate" in [tags] {
    mutate {
      remove_field => [ "devid" ]
    }
  }
  if "Netscaler" in [tags] {
    mutate {
      remove_field => [ "clientip" ]
    }
  }
  if [type] == "syslog" {
    mutate {
      remove_field => [ "host", "received_at", "received_from", "syslog_hostname", "syslog_message", "syslog_timestamp" ]
    }
  }
  if [type] == "VMware" {
    mutate {
      remove_field => [ "host", "program", "syslog_hostname", "syslog_message", "syslog_timestamp" ]
    }
  }
  if [type] == "vCenter" {
    mutate {
      remove_field => [ "host", "message-body", "program", "syslog_hostname", "syslog_message", "syslog_timestamp" ]
    }
  }
}